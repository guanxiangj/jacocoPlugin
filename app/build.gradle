plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    //id 'com.gxj.jacoco.JacocoPlugin'
}

/*JacocoPlugin {
    toolVersion = "1.0.0"
}*/

//代码覆盖配置
/*jacocoCoverageConfig {
    jacocoEnable true //开关
    branchName 'main'//要对比的分支名
    host="http://192.168.16.150:8080"//下载服务host
    execDir "${project.buildDir.absolutePath}/outputs/coverage"//ec 下载存放路径
    sourceDirectories = getAllJavaDir() //源码路径
    classDirectories = ["${rootProject.projectDir.absolutePath}/app/classes"] //classes 路径
    gitPushShell="${project.projectDir}/shell/gitPushShell.sh" //提交git 命令
    copyClassShell="${project.projectDir}/shell/pullDiffClass.sh" //copy classes 命令
    includes = ['com.gxj.jacocoplugin'] //要 包含的class 包名
    excludeClass = { // return true 表示要排除的class
//        println("exclude it=${it}")
        return false
    }
    excludeMethod = {//return true 表示要排除此方法
        println("excludeMethod it=${it}")
        return false
    }
}*/

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.gxj.jacocoplugin"
        minSdkVersion 27
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        incremental = true  //开启增量编译
    }

    buildTypes {
        release {
            minifyEnabled false
            //buildConfigField "String", "host", "\"${jacocoCoverageConfig.host}\""
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        /*debug{
            buildConfigField "String", "host", "\"${jacocoCoverageConfig.host}\""

        }*/
    }
    compileOptions {
        sourceCompatibility sourceCompatibility
        targetCompatibility sourceCompatibility
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

def ArrayList<String> getAllJavaDir() {
    Set<Project> projects = project.rootProject.subprojects
    List<String> javaDir = new ArrayList<>(projects.size())
    projects.forEach {
        javaDir.add("$it.projectDir/src/main/java")
    }
    return javaDir
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation project(path: ':jacoco-core')

    implementation('org.jacoco:org.jacoco.report:0.8.5') {
        exclude group: 'org.jacoco', module: 'org.jacoco.core'
    }
    debugImplementation project(path: ':rt')
    releaseImplementation project(path: ':rt-no-op')
    //implementation 'com.gxj.jacoco:JacocoPlugin:1.0.0'
}